import { Player, GameSettings } from '../models';
import mongoose from 'mongoose';

let pestTimer: NodeJS.Timeout | null = null;

/**
 * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤
 */
export const startPestTimer = async () => {
  try {
    console.log('=== –ó–ê–ü–£–°–ö –¢–ê–ô–ú–ï–†–ê –®–ö–Ü–î–ù–ò–ö–Ü–í ===');
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const gameSettings = await GameSettings.findOne();
    
    if (!gameSettings) {
      console.error('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
      throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
    }
    
    console.log('üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏:', {
      pestTimerSeconds: gameSettings.pestTimerSeconds,
      pestTimerEnabled: gameSettings.pestTimerEnabled,
      baseGrowthTimeMinutes: gameSettings.baseGrowthTimeMinutes
    });
    
    const pestTimerSeconds = gameSettings.pestTimerSeconds;
    
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${pestTimerSeconds} —Å–µ–∫—É–Ω–¥ (${Math.round(pestTimerSeconds/60)} —Ö–≤–∏–ª–∏–Ω)`);
    
    // –ó—É–ø–∏–Ω–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π
    if (pestTimer) {
      console.log('üõë –ó—É–ø–∏–Ω—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ç–∞–π–º–µ—Ä');
      clearInterval(pestTimer);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–ª—é—á–µ–Ω–∏–π —Ç–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤
    if (!gameSettings.pestTimerEnabled) {
      console.log('‚ùå –¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö');
      return { success: false, message: '–¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö' };
    }
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    pestTimer = setInterval(async () => {
      console.log('üîÑ –°–ø—Ä–∞—Ü—é–≤–∞–≤ —Ç–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤');
      await generatePests();
    }, pestTimerSeconds * 1000);
    
    console.log('‚úÖ –¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
    return { success: true, message: `–¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${pestTimerSeconds} —Å–µ–∫—É–Ω–¥` };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤:', error);
    return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤' };
  }
};

/**
 * –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤
 */
export const stopPestTimer = () => {
  if (pestTimer) {
    clearInterval(pestTimer);
    pestTimer = null;
    return { success: true, message: '–¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ' };
  }
  return { success: false, message: '–¢–∞–π–º–µ—Ä —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π' };
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö —Ä–æ—Å–ª–∏–Ω
 */
export const generatePests = async () => {
  console.log('üêõ === –ì–ï–ù–ï–†–ê–¶–Ü–Ø –®–ö–Ü–î–ù–ò–ö–Ü–í ===');
  
  try {
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏ –∑ —É—Å—ñ—Ö –≥—Ä—è–¥–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
    const players = await Player.find();
    console.log(`üë• –ó–Ω–∞–π–¥–µ–Ω–æ ${players.length} –≥—Ä–∞–≤—Ü—ñ–≤`);
    
    // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ—Å–ª–∏–Ω
    const eligiblePlots: { playerId: mongoose.Types.ObjectId, plotIndex: number }[] = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—è—Ö —ñ —ó—Ö –≥—Ä—è–¥–∫–∞—Ö
    players.forEach(player => {
      let playerPlotCount = 0;
      player.plots.forEach((plot, index) => {
        // –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏ –±–µ–∑ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤
        if (plot.status === 'growing' && !plot.hasPests) {
          eligiblePlots.push({ playerId: player._id as mongoose.Types.ObjectId, plotIndex: index });
          playerPlotCount++;
        }
      });
      if (playerPlotCount > 0) {
        console.log(`  üë§ –ì—Ä–∞–≤–µ—Ü—å ${player.user_id}: ${playerPlotCount} –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ—Å–ª–∏–Ω`);
      }
    });
    
    console.log(`üå± –ó–Ω–∞–π–¥–µ–Ω–æ ${eligiblePlots.length} –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ—Å–ª–∏–Ω –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–Ω—è —à–∫—ñ–¥–Ω–∏–∫–∞–º–∏`);
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ—Å–ª–∏–Ω, –∑–∞–≤–µ—Ä—à—É—î–º–æ
    if (eligiblePlots.length === 0) {
      console.log('–ù–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–æ—Å–ª–∏–Ω –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–Ω—è —à–∫—ñ–¥–Ω–∏–∫–∞–º–∏');
      return;
    }
    
    // –†–æ–∑—Ä–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ—Å–ª–∏–Ω, —è–∫—ñ –±—É–¥—É—Ç—å –∑–∞—Ä–∞–∂–µ–Ω—ñ (10%, –∞–ª–µ –º—ñ–Ω—ñ–º—É–º 1)
    const pestsToGenerate = Math.max(1, Math.ceil(eligiblePlots.length * 0.1));
    
    console.log(`–ë—É–¥–µ –∑–∞—Ä–∞–∂–µ–Ω–æ ${pestsToGenerate} —Ä–æ—Å–ª–∏–Ω`);
    
    // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –º–∞—Å–∏–≤ —Ä–æ—Å–ª–∏–Ω (–∞–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle)
    for (let i = eligiblePlots.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [eligiblePlots[i], eligiblePlots[j]] = [eligiblePlots[j], eligiblePlots[i]];
    }
    
    // –ë–µ—Ä–µ–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ—Å–ª–∏–Ω –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–Ω—è
    const plotsToInfect = eligiblePlots.slice(0, pestsToGenerate);
    
    // –ó–∞—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω —à–∫—ñ–¥–Ω–∏–∫–∞–º–∏
    for (const plotInfo of plotsToInfect) {
      const player = await Player.findById(plotInfo.playerId);
      
      if (player && player.plots[plotInfo.plotIndex]) {
        const plot = player.plots[plotInfo.plotIndex];
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —à–∫—ñ–¥–Ω–∏–∫—ñ–≤
        plot.hasPests = true;
        plot.pestAppearedAt = new Date();
        
        // –°–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ —Ä—ñ—Å—Ç —Ä–æ—Å–ª–∏–Ω–∏ (–º–Ω–æ–∂–∏–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—Å—ñ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å—Ç–∞–¥—ñ–π –Ω–∞ 2)
        if (plot.growthStages) {
          // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞–¥—ñ—é
          const now = new Date();
          let currentStageIndex = -1;
          
          for (let i = 0; i < plot.growthStages.length; i++) {
            const stage = plot.growthStages[i];
            const stageEndTime = new Date(stage.startTime);
            stageEndTime.setMinutes(stageEndTime.getMinutes() + stage.durationMinutes);
            
            if (now >= stage.startTime && now < stageEndTime) {
              currentStageIndex = i;
              break;
            }
          }
          
          // –°–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ –≤—Å—ñ —Å—Ç–∞–¥—ñ—ó, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó
          if (currentStageIndex !== -1) {
            for (let i = currentStageIndex; i < plot.growthStages.length; i++) {
              plot.growthStages[i].durationMinutes *= 2;
            }
            
            // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ startTime –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∞–¥—ñ–π
            for (let i = currentStageIndex + 1; i < plot.growthStages.length; i++) {
              const prevStage = plot.growthStages[i - 1];
              const prevStageEndTime = new Date(prevStage.startTime);
              prevStageEndTime.setMinutes(prevStageEndTime.getMinutes() + prevStage.durationMinutes);
              
              plot.growthStages[i].startTime = prevStageEndTime;
            }
          }
        }
        
        await player.save();
        console.log(`–®–∫—ñ–¥–Ω–∏–∫–∏ –∑'—è–≤–∏–ª–∏—Å—è –Ω–∞ –≥—Ä—è–¥—Ü—ñ ${plotInfo.plotIndex} –≥—Ä–∞–≤—Ü—è ${player.user_id}`);
      }
    }
    
    console.log(`–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–∞–∂–µ–Ω–æ ${plotsToInfect.length} —Ä–æ—Å–ª–∏–Ω —à–∫—ñ–¥–Ω–∏–∫–∞–º–∏`);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à–∫—ñ–¥–Ω–∏–∫—ñ–≤:', error);
  }
};

/**
 * –†—É—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∫—ñ–¥–Ω–∏–∫—ñ–≤ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
 */
export const manualGeneratePests = async () => {
  try {
    console.log('–†—É—á–Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —à–∫—ñ–¥–Ω–∏–∫—ñ–≤...');
    await generatePests();
    return { success: true, message: '–®–∫—ñ–¥–Ω–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ' };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —à–∫—ñ–¥–Ω–∏–∫—ñ–≤:', error);
    return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —à–∫—ñ–¥–Ω–∏–∫—ñ–≤' };
  }
}; 